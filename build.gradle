apply from: "dependency.gradle"

def getPomPackaging() {
    return hasProperty('POM_PACKAGING') ? POM_PACKAGING : "jar"
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        //Spring repo
        maven { url "https://m2.tnydev.com/repository/maven-public/" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/release" }
        maven { url 'http://repo.spring.io/plugins-snapshot' }
    }

    dependencies {
//        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.5.RELEASE")
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.5.RELEASE"
    }
}

configure(allprojects) {
    group 'com.tny.game'
    apply plugin: "idea"
    apply plugin: 'maven'

    ext.verNumber = '4.1.x'
//    ext.pj_version = verNumber + '-RELEASE'
    ext.pj_version = verNumber + '-SNAPSHOT'
    ext.version = pj_version

    version pj_version


    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        //Spring repo
        maven { url "https://m2.tnydev.com/repository/maven-public/" }
        maven { url "http://repo.spring.io/snapshot" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/release" }
        maven { url 'http://repo.spring.io/plugins-snapshot' }
    }


}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: "idea"
    apply plugin: 'java-library'

    ext.springBoot = name.endsWith("-demo") || name.endsWith("-suite") || name.contains("-starter-")

    if (springBoot) {
        apply plugin: 'io.spring.dependency-management'
//        apply plugin: 'org.springframework.boot'

        buildscript {

            dependencyManagement {
                imports {
                    mavenBom libs.spring_boot_dependencies
                    mavenBom libs.spring_cloud_dependencies
                }
            }

        }
    }

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }

    [compileJava, compileTestJava, javadoc]*.options*.encoding = "${encoding}"

    buildscript {

        task createJavaProject {
            doLast {
                sourceSets*.java.srcDirs*.each { it.mkdirs() }
                sourceSets*.resources.srcDirs*.each { it.mkdirs() }
//        sourceSets*.proto.srcDirs*.each { it.mkdirs() }
            }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives sourcesJar
        }
    }


    configurations {
        compile.exclude module: 'spring-boot-starter-logging'//排除对默认logging的依赖
    }
//    sourceSets {
//        main {
//            compileClasspath += configurations.provided
//        }
//        test {
//            compileClasspath += configurations.provided
//            runtimeClasspath += configurations.provided
//        }
//    }
//
//    idea.module {
//        scopes.PROVIDED.plus += [configurations.provided]
//    }

    jar {
        exclude("**.sql", "**.xml", "**.properties")
    }

    dependencies {

        implementation libs.slf4j_api

        testImplementation libs.mockito
        testImplementation libs.jmock_junit4
        testImplementation libs.spring_test
        testImplementation libs.slf4j_simple
        testImplementation project(":tny-game-tester")

    }


    uploadArchives {

        repositories {

            mavenDeployer {

                pom.groupId = project.group
                pom.artifactId = project.name
                pom.version = project.version

                pom.project {
                    name = project.name
                    packaging = hasProperty('POM_PACKAGING') ? POM_PACKAGING : "jar"
                    description = hasProperty("POM_DESCRIPTION") ? POM_DESCRIPTION : "";
                    url = hasProperty("POM_URL") ? POM_URL : "";
                }

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }

    }

    idea {
        module {
            downloadSources = true
        }
//            project {
//                jdkName = project_jdk
//                languageLevel = project_jdk
//            }
    }

}