plugins {
    id 'org.ajoberstar.grgit' version '4.0.2' apply false
    id 'org.springframework.boot' version "${springBootVersion}" apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
    id "com.baidu.jprotobuf" version "1.2.1" apply false
    id "com.gradle.plugin-publish" version "0.16.0" apply false
}

apply from: "${rootDir}/gradle/dependency.gradle"
apply from: "${rootDir}/gradle/git.gradle"

ext {
    moduleProjects = subprojects.findAll { it.name.startsWith("tny-game-") }
    javaProjects = moduleProjects - project(":tny-game-bom")
    javaProjects = javaProjects.findAll { !it.name.endsWith("-gradle") }
    gradleProjects = moduleProjects.findAll { it.name.endsWith("-gradle") }
}

configure(subprojects) {

    apply plugin: "idea"
    apply plugin: 'maven-publish'

    apply plugin: "io.spring.dependency-management"

    dependencyManagement {

        imports {
            mavenBom("org.apache.logging.log4j:log4j-bom:${log4j2Version}")
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
            mavenBom("com.alibaba.cloud:spring-cloud-alibaba-dependencies:${alibabaCloudVersion}")
            mavenBom("com.google.protobuf:protobuf-bom:3.22.2")
            mavenBom("com.fasterxml.jackson:jackson-bom:2.14.2")
        }

        dependencies {
            dependency "${libs.netty_common}:${nettyVersion}"
            dependency "${libs.netty_handler}:${nettyVersion}"
            dependency "${libs.netty_handler_proxy}:${nettyVersion}"
            dependency "${libs.netty_transport}:${nettyVersion}"
            dependency "${libs.netty_buffer}:${nettyVersion}"
            dependency "${libs.netty_codec}:${nettyVersion}"
            dependency "${libs.netty_codec_dns}:${nettyVersion}"
            dependency "${libs.netty_codec_socks}:${nettyVersion}"
            dependency "${libs.netty_codec_http}:${nettyVersion}"
            dependency "${libs.netty_codec_http2}:${nettyVersion}"
            dependency "${libs.netty_resolver}:${nettyVersion}"
            dependency "${libs.netty_resolver_dns}:${nettyVersion}"
            dependency "${libs.netty_transport_classes_epoll}:${nettyVersion}"
            dependency "${libs.netty_transport_native_unix_common}:${nettyVersion}"
            dependency "${libs.redisson}:${vers.redisson}"
            dependency "${libs.commons_io}:2.8.0"
            dependency "${libs.commons_codec}:1.15"
            dependency "${libs.commons_beanutils}:1.9.4"
            dependency "${libs.commons_collections}:3.2.2"
            dependency "${libs.commons_collections4}:4.4"
            dependency "${libs.commons_configuration}:1.10"
            dependency "${libs.commons_lang}:2.6"
            dependency "${libs.commons_lang3}:3.12.0"
            dependency "${libs.commons_math3}:3.6.1"
            dependency "${libs.commons_compress}:1.22"
            dependency "${libs.commons_pool2}:2.9.0"
            dependency "${libs.commons_pool}:1.6"
            dependency "${libs.commons_crypto}:1.1.0"
            dependency "${libs.commons_dbcp2}:2.8.0"
            dependency "${libs.guava}:31.1-jre"
            dependency "${libs.javassist}:3.29.2-GA"
            dependency "${libs.xstream}:1.4.20"

//            dependency "${libs.poi}:${vers.poi}"
//            dependency "${libs.poi_ooxml}:${vers.poi}"
//            dependency "${libs.okio}:2.10.0"
//            dependency "${libs.okhttp}:2.7.5"
//            dependency "${libs.okhttp3}:${vers.okhttp3}"
//            dependency "${libs.asm}:5.0.4"
        }

        generatedPomCustomization {
            enabled = false
        }
    }
    group 'com.tny.game'
    version "${projectVersion}"

    repositories {
        mavenLocal()
        maven { url "https://mirrors.cloud.tencent.com/nexus/repository/maven-public/" }
        maven { url "https://m2.tnydev.com/repository/maven-public/" }
        maven { url "https://maven.aliyun.com/repository/public" }
    }

}


configure(gradleProjects) {
    apply plugin: 'groovy'
    apply plugin: 'java-gradle-plugin'
    apply from: "${rootDir}/gradle/publish.gradle"

    configurations {
        all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    [compileJava, compileGroovy, javadoc]*.options*.encoding = "${encoding}"

    dependencies {
        api gradleApi()
        api localGroovy()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    task createProject {
        doLast {
            sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
            sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }
    }
}

configure(javaProjects) {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply from: "${rootDir}/gradle/publications.gradle"
    apply from: "${rootDir}/gradle/tny-module.gradle"

//    ext.springBoot = name.endsWith("-demo") || name.endsWith("-suite") || name.contains("-starter-")

    sourceCompatibility = "${javaVersion}"
    targetCompatibility = "${javaVersion}"

    task createProject {
        doLast {
            sourceSets*.java.srcDirs*.each { it.mkdirs() }
            sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }
    }

    configurations {
        all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
        compile.exclude module: 'spring-boot-starter-logging'//排除对默认logging的依赖
    }

    compileJava.dependsOn(processResources)
    [compileJava, compileTestJava, javadoc]*.options*.encoding = "${encoding}"

    compileJava {
        options.compilerArgs << '-parameters'
        options.fork = true
        options.encoding = "UTF-8"
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        exclude("**.sql", "**.xml", "**.properties")
    }

    test {
        useJUnitPlatform()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        archiveClassifier.set("sources")
        from sourceSets.main.allSource
    }

    java {
        withSourcesJar()
    }

    dependencies {

        implementation libs.slf4j_api
        implementation libs.commons_lang3

        testImplementation libs.mockito_junit_jupiter
        testImplementation libs.junit_jupiter
        testImplementation libs.jmock_junit5
        testImplementation libs.spring_test
        testImplementation libs.slf4j_simple

    }


    idea {
        module {
            inheritOutputDirs = false
            outputDir = compileJava.destinationDir
            testOutputDir = compileTestJava.destinationDir
            downloadJavadoc = false
            downloadSources = false
        }
    }

}